service: serverless-nodejs

provider:
  name: aws
  runtime: nodejs8.10
  tracing:
    lambda: true
  stage: ${opt:stage, 'dev'}
  profile: ${${file(./config.${self:provider.stage}.json):profile}, 'okta-rnd-team_524621635179'}
  
  tag: 
    Name: $(self:service)
    Environment: $(self:provider.stage)
    Department: dev
    Team: int-xmn
    Owner: Lucy.Tu
  environment:
    STAGE: ${self:provider.stage}
    TABLE_NAME: ${self:provider.stage}-${self:service}-Table
    appKey: ${file(./config.${self:provider.stage}.json):appKey}
    AWSAccount: ${file(./config.${self:provider.stage}.json):AWSAccount}

  iamRoleStatements: # permissions for all of your functions can be set here
    - Effect: Allow
      Action: # Gives permission to DynamoDB tables in a specific region
        - dynamodb:DescribeTable
        - dynamodb:Query
        - dynamodb:Scan
        - dynamodb:GetItem
        - dynamodb:PutItem
        - dynamodb:UpdateItem
        - dynamodb:DeleteItem
      Resource: arn:aws:dynamodb:us-east-1:${self:provider.environment.AWSAccount}:table/${self:provider.environment.TABLE_NAME}

functions:
  hello:
    handler: handler.hello
    events:
     - http:
         path: index
         method: get
resources:
 Resources:
  DynamoDBTable:
    Type: AWS::DynamoDB::Table
    Properties:
      TableName: ${self:provider.environment.TABLE_NAME}
      AttributeDefinitions:
        - AttributeName: userId
          AttributeType: S
      KeySchema:
        - AttributeName: userId
          KeyType: HASH
      ProvisionedThroughput:
        ReadCapacityUnits: 1
        WriteCapacityUnits: 1
custom:
  dynamodb:
    stages:
      - dev
    start:
      port: 8000
      inMemory: true
      heapInitial: 200m
      heapMax: 1g
      migrate: true
      seed: true
      convertEmptyValues: true
plugins:
  - serverless-offline
  - serverless-dynamodb-local
